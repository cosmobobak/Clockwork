#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(270, 425);
inline const PParam KNIGHT_MAT = S(93, -7);
inline const PParam BISHOP_MAT = S(954, 1064);
inline const PParam ROOK_MAT   = S(1445, 1770);
inline const PParam QUEEN_MAT  = S(3089, 3272);
inline const PParam TEMPO_VAL  = S(48, 13);

inline const PParam BISHOP_PAIR_VAL  = S(63, 190);
inline const PParam DOUBLED_PAWN_VAL = S(-48, -77);

inline const PParam POTENTIAL_CHECKER_VAL = S(-73, 3);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(0, 18), S(55, 25), S(85, 66), S(190, 136), S(459, 527), S(1802, 1423),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(48, 47), S(50, 23), S(54, 39), S(103, 114), S(651, -133),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-11, -16), S(-31, 23), S(-32, 75), S(42, 130), S(75, 237), S(27, 45),
};
inline const PParam DEFENDED_PASSED_PUSH = S(12, 51);

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(368, 431), S(459, 533), S(513, 630), S(564, 658), S(610, 680), S(632, 725), S(665, 720), S(691, 716), S(744, 630),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-126, -266), S(-75, -174), S(-18, -111), S(-6, -54), S(29, -23), S(41, 0), S(63, 8), S(74, 18), S(82, 28), S(87, 22), S(113, 9), S(177, -49), S(226, -69), S(301, -103),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-208, -304), S(-86, -90), S(-44, -14), S(-24, -18), S(-10, 17), S(4, 33), S(22, 41), S(49, 38), S(75, 46), S(101, 55), S(125, 55), S(138, 60), S(184, 47), S(169, 51), S(269, -40),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(71, 103), S(-626, 595), S(-201, -385), S(-148, -184), S(-109, -224), S(-76, -179), S(-111, 22), S(-87, -10), S(-74, 19), S(-72, 47), S(-63, 65), S(-63, 100), S(-41, 85), S(-29, 80), S(-20, 81), S(-8, 75), S(-21, 97), S(0, 57), S(17, 41), S(49, -13), S(90, -59), S(126, -130), S(214, -198), S(406, -397), S(368, -400), S(968, -713), S(750, -610), S(1350, -982),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(383, 794), S(95, 430), S(22, 478), S(21, 507), S(-2, 499), S(-27, 480), S(-16, 487), S(-13, 461), S(33, 344),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(21, 0), S(50, -20),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(28, 0), S(35, -1),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(53, -50), S(62, -68), S(104, -63), S(156, -81),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-6, 34), S(-52, 59), S(-42, 81), S(-35, 80), S(14, 66),
};

inline const PParam PAWN_THREAT_KNIGHT = S(207, 64);
inline const PParam PAWN_THREAT_BISHOP = S(179, 78);
inline const PParam PAWN_THREAT_ROOK   = S(177, 50);
inline const PParam PAWN_THREAT_QUEEN  = S(147, -82);

inline const PParam KNIGHT_THREAT_BISHOP = S(81, 73);
inline const PParam KNIGHT_THREAT_ROOK   = S(222, -10);
inline const PParam KNIGHT_THREAT_QUEEN  = S(128, -63);

inline const PParam BISHOP_THREAT_KNIGHT = S(79, 20);
inline const PParam BISHOP_THREAT_ROOK   = S(207, 41);
inline const PParam BISHOP_THREAT_QUEEN  = S(167, 37);

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(-116, 511),   S(6, 519),      S(157, 461),    S(314, 237),    S(268, 251),    S(282, 347),    S(156, 388),    S(228, 370),    //
    S(18, 17),      S(183, 38),     S(116, -40),    S(155, -149),   S(81, -152),    S(20, -65),     S(-23, 11),     S(-47, 4),      //
    S(-33, -48),    S(-15, -43),    S(-21, -88),    S(-27, -120),   S(-39, -120),   S(-84, -115),   S(-101, -44),   S(-122, -22),   //
    S(-28, -123),   S(-11, -84),    S(-40, -131),   S(-43, -130),   S(-63, -139),   S(-94, -119),   S(-134, -48),   S(-143, -69),   //
    S(-23, -158),   S(39, -154),    S(-19, -116),   S(-82, -97),    S(-77, -116),   S(-126, -112),  S(-132, -85),   S(-163, -87),   //
    S(-19, -157),   S(135, -156),   S(51, -115),    S(-49, -72),    S(-66, -127),   S(-92, -106),   S(-106, -63),   S(-140, -81),   //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-64, 143),    S(189, 255),    S(-249, 643),   S(263, 383),    S(-17, 477),    S(-63, 511),    S(-134, 320),   S(-203, 355),   //
    S(358, 307),    S(384, 391),    S(516, 256),    S(373, 374),    S(420, 357),    S(348, 325),    S(261, 350),    S(313, 291),    //
    S(375, 334),    S(346, 425),    S(549, 366),    S(450, 388),    S(484, 363),    S(337, 395),    S(335, 362),    S(238, 342),    //
    S(433, 362),    S(393, 392),    S(408, 413),    S(397, 426),    S(382, 408),    S(370, 407),    S(305, 358),    S(310, 380),    //
    S(356, 374),    S(384, 372),    S(358, 407),    S(321, 406),    S(332, 413),    S(331, 417),    S(293, 370),    S(306, 283),    //
    S(284, 313),    S(313, 306),    S(296, 314),    S(321, 380),    S(334, 379),    S(252, 341),    S(258, 324),    S(224, 320),    //
    S(306, 408),    S(337, 317),    S(281, 319),    S(270, 350),    S(265, 333),    S(240, 307),    S(263, 283),    S(172, 224),    //
    S(245, 327),    S(280, 318),    S(339, 246),    S(320, 310),    S(349, 297),    S(288, 196),    S(232, 300),    S(110, 297),    //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-112, 97),    S(-11, 11),     S(-528, 121),   S(-283, 121),   S(-321, 138),   S(-408, 134),   S(5, 72),       S(-2, 48),      //
    S(15, -36),     S(4, 75),       S(37, 52),      S(32, 13),      S(21, 36),      S(11, 53),      S(2, 42),       S(-58, 50),     //
    S(75, 52),      S(110, 63),     S(313, 26),     S(151, 28),     S(94, 45),      S(33, 86),      S(144, 28),     S(24, 82),      //
    S(33, 19),      S(18, 81),      S(131, 45),     S(129, 61),     S(143, 62),     S(57, 82),      S(41, 58),      S(-37, 70),     //
    S(16, -12),     S(41, 41),      S(46, 44),      S(76, 63),      S(76, 96),      S(27, 74),      S(29, 20),      S(20, -41),     //
    S(65, -24),     S(113, -2),     S(113, -1),     S(27, 59),      S(23, 67),      S(17, 74),      S(84, 4),       S(42, -45),     //
    S(34, -55),     S(118, -31),    S(61, -19),     S(37, 16),      S(20, -8),      S(51, -21),     S(3, 10),       S(66, -106),    //
    S(50, -1),      S(17, 17),      S(17, 24),      S(22, -35),     S(8, -32),      S(27, 2),       S(43, -68),     S(-35, 16),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(114, 47),     S(214, 49),     S(108, 92),     S(95, 99),      S(118, 73),     S(72, 78),      S(96, 74),      S(100, 76),     //
    S(126, 83),     S(173, 79),     S(249, 54),     S(176, 104),    S(164, 105),    S(79, 124),     S(42, 121),     S(59, 111),     //
    S(21, 93),      S(276, 28),     S(230, 37),     S(232, 32),     S(142, 67),     S(60, 101),     S(111, 71),     S(-29, 114),    //
    S(-5, 77),      S(43, 71),      S(79, 56),      S(130, 4),      S(95, 36),      S(30, 101),     S(8, 92),       S(-84, 96),     //
    S(-122, 30),    S(18, 15),      S(-11, 43),     S(-5, 40),      S(-15, 39),     S(-51, 96),     S(-99, 98),     S(-120, 78),    //
    S(-106, 14),    S(10, -63),     S(-19, -13),    S(-49, 4),      S(-20, -15),    S(-108, 50),    S(-111, 33),    S(-116, 18),    //
    S(-160, 38),    S(-73, -30),    S(-32, -38),    S(-32, -21),    S(-48, -5),     S(-60, 0),      S(-113, -14),   S(-121, -16),   //
    S(-128, 17),    S(-94, 30),     S(-53, -8),     S(-19, -22),    S(-32, -4),     S(-41, -7),     S(-58, -22),    S(-89, -3),     //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(69, 104),     S(89, 60),      S(133, 67),     S(-13, 199),    S(48, 111),     S(-51, 183),    S(56, 58),      S(-7, 45),      //
    S(87, 91),      S(-87, 274),    S(-48, 323),    S(-142, 349),   S(-107, 280),   S(-148, 293),   S(-70, 161),    S(-12, 57),     //
    S(-4, 172),     S(98, 165),     S(73, 202),     S(-14, 281),    S(-37, 230),    S(-59, 231),    S(16, 117),     S(1, 30),       //
    S(48, 62),      S(47, 133),     S(19, 156),     S(0, 235),      S(-26, 231),    S(-10, 133),    S(10, 65),      S(-25, 78),     //
    S(34, 82),      S(63, 65),      S(39, 126),     S(2, 183),      S(-23, 200),    S(-25, 155),    S(-18, 49),     S(-13, 0),      //
    S(59, -117),    S(62, -5),      S(49, 71),      S(-27, 136),    S(11, 65),      S(4, 68),       S(26, -34),     S(-8, -25),     //
    S(55, -232),    S(53, -277),    S(27, -98),     S(44, -10),     S(1, 22),       S(44, -97),     S(29, -35),     S(-19, -7),     //
    S(-72, -37),    S(-72, -308),   S(-11, -262),   S(15, -167),    S(40, -77),     S(64, -183),    S(39, -133),    S(-23, -28),    //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(456, -710),   S(242, -132),   S(-76, -17),    S(-207, 56),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(316, -160),   S(-28, 135),    S(-94, 167),    S(226, 82),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-51, 37),     S(99, 145),     S(167, 116),    S(244, 51),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-257, 63),    S(-21, 126),    S(120, 120),    S(91, 85),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-222, 4),     S(-43, 78),     S(18, 87),      S(-53, 137),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-158, -34),   S(58, 0),       S(-47, 71),     S(-100, 120),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(83, -124),    S(127, -47),    S(11, 25),      S(-107, 90),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-23, -191),   S(78, -144),    S(-52, -96),    S(-20, -126),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
